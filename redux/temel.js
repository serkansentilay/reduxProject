/*
configureStore
Redux store oluÅŸturmak iÃ§in kullanÄ±lÄ±r.


import { configureStore } from '@reduxjs/toolkit'
import counterReducer from '../features/counter/counterSlice'

export const store = configureStore({
  reducer: {
    counter: counterReducer
  }
})
configureStore: Storeâ€™u otomatik ayarlarla (devtools, thunk middleware vs.) oluÅŸturur.

reducer kÄ±smÄ±nda sliceâ€™lar tanÄ±mlanÄ±r.


*/


/*
createSlice
Bir slice; state + reducer + actionâ€™larÄ± aynÄ± dosyada tutan yapÄ±dÄ±r.


import { createSlice } from '@reduxjs/toolkit'

const counterSlice = createSlice({
  name: 'counter',
  initialState: { value: 0 },
  reducers: {
    increment: state => {
      state.value += 1
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload
    }
  }
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions
export default counterSlice.reducer
Immer sayesinde doÄŸrudan state.value += 1 gibi yazÄ±labilir.


*/

/*
useSelector ve useDispatch
React bileÅŸenlerinden storeâ€™a eriÅŸmek iÃ§in kullanÄ±lÄ±r.


import { useSelector, useDispatch } from 'react-redux'
import { RootState } from '../../app/store'
import { increment } from './counterSlice'

const count = useSelector((state: RootState) => state.counter.value)
const dispatch = useDispatch()
TypeScript'te genellikle Ã¶zel hook'lar oluÅŸturulur:


export const useAppDispatch: () => AppDispatch = useDispatch
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector

*/

/*
createAsyncThunk
Async iÅŸlemler iÃ§in (API Ã§aÄŸrÄ±sÄ± gibi) kullanÄ±lÄ±r.

import { createAsyncThunk } from '@reduxjs/toolkit'

export const fetchUserById = createAsyncThunk(
  'users/fetchById',
  async (userId: number) => {
    const response = await fetch(`/api/user/${userId}`)
    return await response.json()
  }
)
createSlice iÃ§inde bu thunk'Ä± extraReducers ile yakalarsÄ±n:


extraReducers: builder => {
  builder
    .addCase(fetchUserById.pending, state => {
      state.status = 'loading'
    })
    .addCase(fetchUserById.fulfilled, (state, action) => {
      state.user = action.payload
      state.status = 'succeeded'
    })
}


*/

/*
 Selector Nedir?
Stateâ€™ten veri Ã§ekmek iÃ§in kullanÄ±lan fonksiyonlardÄ±r.

ts
Kopyala
DÃ¼zenle
export const selectCount = (state: RootState) => state.counter.value
Ya da bileÅŸen iÃ§inde doÄŸrudan yazabilirsin:

tsx
Kopyala
DÃ¼zenle
const count = useSelector((state: RootState) => state.counter.value)
ğŸ§© Provider ile Store BaÄŸlantÄ±sÄ±
Ana dosyada:

tsx
Kopyala
DÃ¼zenle
import { Provider } from 'react-redux'
import { store } from './app/store'

root.render(
  <Provider store={store}>
    <App />
  </Provider>
)
*/


/*
| State Nerede TutulmalÄ±?        | AÃ§Ä±klama                                                                                 |
| ------------------------------ | ---------------------------------------------------------------------------------------- |
| **Redux Store**                | TÃ¼m uygulamanÄ±n paylaÅŸtÄ±ÄŸÄ± veriler (Ã¶rn: kullanÄ±cÄ± bilgisi, tema, sepet durumu vs.)      |
| **useState / Component State** | YalnÄ±zca bir bileÅŸene Ã¶zel geÃ§ici durum (Ã¶rn: input kutusundaki yazÄ±, dropdown aÃ§Ä±k mÄ±?) |

*/

/*
| YapÄ±               | AÃ§Ä±klama                             |
| ------------------ | ------------------------------------ |
| `configureStore`   | Redux storeâ€™u kurar                  |
| `createSlice`      | State + Reducer + Actions bir arada  |
| `useSelector`      | Storeâ€™dan veri okur                  |
| `useDispatch`      | Storeâ€™a aksiyon gÃ¶nderir             |
| `createAsyncThunk` | Async iÅŸlem (API Ã§aÄŸrÄ±sÄ± vs.) yazÄ±mÄ± |
| `Provider`         | Redux storeâ€™u tÃ¼m uygulamaya saÄŸlar  |

*/

